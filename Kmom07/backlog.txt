Find out why the "Why?" question is displayed when sorting by a tag that it doesn't have. I'm guessing
it's because the tag created contains two words "New Tag" it somehow messes with the prepared statement.

Make sure users can only update the score of a question once.
    1. Create a new column in question, answer and comment tables.
    2. Make sure it contains a string where each ID is split with a comma.
    3. When upvoting or downvoting, take the string from the database, check if the ID is there before
    making any changes. If it is, nothing happens, if it isn't a vote is placed.

    in_array('13', explode(',', '8,7,13,14,16'));
    Just to elaborate: explode turns the string into an array, splitting it at each ',' in this case.
    Then, in_array checks if the string '13' is in the resulting array somewhere.

Check if you can't use Comments\Comment.php as the comment model in Forum\ as well. Meaning the deletion of the
Comment.php model in forum. Not sure about this, will have to think about it.

Study the different view templates so you understand what each of them does. See if they can't be reduced or even
removed completely with better code.




Find a way to implement/hardcode it so that admin can never be removed, even if someone
figures out the url links to use to remove it.

UsersController.php: place functions in proper declarative order, top to bottom.


project.php: look over this file, see if anything needs to be changed.


ForumController.php: place functions in proper declarative order, top to bottom.
ForumController.php: change idAction() to questionAction() for clarity and a clean URL?
ForumController.php: find out if you can't move the user functions into UsersController.php.
ForumController.php: Create database link tables (questionTags) for questions answers and comments too? (Will require more research)
ForumController.php: See if you can split it up into several controllers? one for tag one for... and so on.
ForumController.php: Potentially reduce size by splitting up answer, question and comment management into three new objects
ForumController.php: have tagCreateAction() include a cancel button in  case the user doesn't want to create a tag.
ForumController.php: see if you can't use other Cform objects to reduce code and code repetition.

User.php: code could possibly be reduced by abstracting a lot of the functions into the session trait.
User.php: Allow users to delete their own questions.
User.php: change so that User saved the ID of the user in session instead of using acronym.


Consider creating a HTMLList class that creates a list or possibly HTMLlink to create links

CommentController: Check if removeAllAction() should be removed. Could be a security risk.
CommentController: Check if setupAction() should be removed. Could be a security risk.

Comment.php: make sure it uses the new traits to reduce the code.

Design: Fix the design of the number in the score of the question. It looks unaligned.
Design: Display added tags below a posted question.
Design: Fix the design when displaying a user profile. The lightblue box should be aligned to the left.
Design: Make sure the size of a user box remains the same in the user menu, even if buttons are displayed
or not.
Design: make it so that the user that placed a comment is always displayed below the comment text, so that the
button and time of placement never moves.
Design: create a clearer separation between questions, perhaps using color variants.

Fix: Remove all each() function errors. The function is deprecated.
Create a list of the files I've worked in for the Git README file.


-------- Completed --------
-------- 2019-09-11:
ForumController.php: replace the redirects function with a private redirect variable instead. The function is already
private, there's no need for it to be a function. Besides if it's a variable it can be used in more than on e place
to make redirect link changes easier.
ForumController.php: rename redirect array index "user" to "profile".
ForumController.php: separate templates in $redirect into private $templates.
UsersController.php: rename userStatusAction() to statusAction() ?
UserController.php: replace redirects with private redirect variable.
UsersController.php: separate templates in $redirect into private $templates.
UsersController.php: move database interactions into functions in User.php
CommentController.php: replace redirects with private redirect variable.
CommentController.php: separate templates in $redirect into private $templates.


-------- 2019-09-10:
make all redirects() private since they don't have to be public.
Comments: add 3 empty lines in between functions.
ForumController: remove unnecessary commas.
ForumController.php: move userStatusAction() to UsersController.
CommentController.updateAction(): remove unnecessary assignment
CommentController.initialize(): remove unnecessary assignment

-------- 2019-09-07:
UserController.php: make sure that the webpage redirects to the menu again after a user has been deleted.
ForumController.php: create functionality so that a user can un-accept an answer.
ForumController.php: Start using type declarations in function parameter lists to reduce type checks.
CDatabaseModel: Check if orderBy groupBy executeFetchAll are necessary and how they work.
CDatabaseModel: If orderBy groupBy executeFetchAll are necessary add comments.
UserController.php: rename idAction() profileAction() for clarity
Make sure the Administrator can't delete nor softdelete himself or be deleted by anyone for that matter.

-------- 2019-09-06:
ForumController.php: Replace the cleaning of parameters with Escaper where necessary
ForumController.php.voteAction() clean the variable $number.
ForumController.php.callbackCreateTag(): the tag param is being cleaned, does it need the escaper? It shouldn't
have to be cleaned. The PHP prepared statements should prevent any SQL injection.
ForumController.php: editVote() could be moved to the TForumModel trait.
ForumController.php: check if you can't use find() instead of the array index solution. It was possible with
the following changes:
    User.php: have findByAcronym fetch into the model instead of returning an array.
    Tag.php: have findByName fetch into the model instead of returning an array.
ForumController.php: reduce code by moving database queries away from the controller into the model.
ForumController.php.tagCreateAction(): should this really allow $tag param to be null? It's absolutely necessary.
    tagCreateAction is used without a parameter to display the tag creation form.
ForumController.php.acceptedAction(): check if id must be set before a call to update. It must be set, id is the WHERE identifier

-------- 2019-09-05:
ForumController.menuAction(): decode GET param to allow tags to have several words.
TForumModel.php: Look over if QACT actually uses this model. Q does, but what about ACT?
ForumController.php.scoreAction(): add if-statement that checks if $id is numeric

-------- 2019-09-04:
QuestionTags.php: implement the link table model in ForumController.
ForumController.php & Question.php: rename setQuestion and getQuestion to setQuestionId & getQuestionId for clarity.

ForumController & UserController: either add a class or find a way to move the renderDefaultPage() out
of ForumController so that both UserController and ForumController can use it.

-------- Previous:
ForumController.tagCreateAction($tag=null): Clean the $tag parameter with escaper.
ForumController: Look over why ForumController.getTagForm($values) takes an array.
^ Because it needs one to autofill the values of the form.
Update the github readme file to include admin username and password so that users can log in.
Check if you can use the HTMLTable class to create the questions table: no
Create a class that creates tables easily.
Find out why the comments aren't displaying properly.
Replace if-statement at 223-240 in ForumController with a switch.
Add explaining comments to ForumController
Create one function: editVote that takes a number to edit the rating with instead of having the functions
downvote and upvote.
Turn downvoteAction() and upvoteAction() into one single function. It will require:
1. Providing a positive or negative 1 through the URL.
2. A safety check preventing anyone from injecting a number that's higher than 1 or lower than -1.
3. Creating 3 Q, A, C new redirects for the new function.
4. Editing forum-question.tpl.php to use the new redirect.

Edit lines 547-558 in ForumController to be a switch instead of if-statements.
commit changes in fixup as "add private ForumController.createRedirect()"
Removed: 'id' 	=> $id, from ForumController.upvote(). This line could create a bug where the
question, answer or comment changes ownership. Especially if the id is changed inside the URL.
